{"version":3,"sources":["layouts/header/index.tsx","layouts/main.tsx","http/http-client.ts","http/service/MovieService.ts","components/movie/movieCard/movie-card.tsx","components/movie/movie-list.tsx","pages/movies/index.tsx","router/config.ts","pages/home/index.tsx","pages/error/index.tsx","router/router-view.tsx","App.tsx","serviceWorker.ts","index.tsx","components/movie/movieCard/movie-card.module.scss"],"names":["Header","isTabletOrMobile","useMediaQuery","query","className","Group","align","Alignment","LEFT","Heading","to","placeholder","type","Divider","icon","Main","children","http","axios","create","baseURL","process","interceptors","request","use","config","params","MovieService","get","movies","data","console","log","MovieCard","props","movie","styles","card_body","src","backdrop_path","alt","title","SwiperCore","Virtual","MovieListComponent","movieList","spaceBetween","slidesPerView","virtual","map","index","key","service","path","component","style","textAlign","display","flexDirection","justifyContent","height","maxWidth","margin","color","href","useState","setMovies","useEffect","getPopularMovies","then","res","results","CustomRoute","location","pathname","beforeEnter","matchRoute","routerMap","find","item","url","replace","RegExp","test","exact","hasChild","RouterView","App","StrictMode","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d42affdf.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { Navbar, Alignment, Button } from '@blueprintjs/core';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { Link } from 'react-router-dom';\r\nimport './index.scss';\r\n\r\nconst Header: FC = () => {\r\n    const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1224px)' });\r\n    return (\r\n        <Navbar className=\"bp3-violet1\">\r\n            <Navbar.Group align={Alignment.LEFT}>\r\n                <Navbar.Heading>\r\n                    <Link to=\"/\">React Movies</Link>\r\n                </Navbar.Heading>\r\n                {!isTabletOrMobile && (\r\n                    <input className=\"bp3-input\" placeholder=\"Search your favorite Movie/Tv Show\" type=\"search\" />\r\n                )}\r\n                <Navbar.Divider className=\"customize-bar-divider\" />\r\n                <Link to=\"/movies\">\r\n                    <Button className=\"bp3-minimal\" icon=\"film\">Movies</Button>\r\n                </Link>\r\n                <Link to=\"/\">\r\n                    <Button className=\"bp3-minimal\" icon=\"video\">TV Shows</Button>\r\n                </Link>\r\n            </Navbar.Group>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FC } from 'react';\r\nimport Header from './header/';\r\nimport './main.scss';\r\nconst Main: FC = ({ children }) => {\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"header\">\r\n                <Header />\r\n            </div>\r\n            <div className=\"body\">{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import axios from 'axios';\r\nconst http = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n    \r\n});\r\nhttp.interceptors.request.use(config => {\r\n    config.params = {\r\n     // add your default ones\r\n     \"api_key\": process.env.REACT_APP_API_KEY,\r\n     // spread the request's params\r\n      ...config.params,\r\n    };\r\n    return config;\r\n  });\r\nexport default http;\r\n","import http from '../http-client'\r\n\r\nexport default class MovieService{\r\n    async getPopularMovies(){\r\n        try{\r\n            const movies =  await http.get(\"/movie/popular\")\r\n            return movies.data\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n    async getLatestMovies(){\r\n        try{\r\n            const movies =  await http.get(\"/movie/latest\")\r\n            console.log(movies)\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Card } from '@blueprintjs/core';\r\nimport styles from './movie-card.module.scss'\r\ninterface Props{\r\n    movie: iMovieList;\r\n}\r\n\r\nexport const MovieCard: React.FC<Props> = (props) => {\r\n    const {movie} = props\r\n    return (\r\n        <Card>\r\n            <div className={styles.card_body}>\r\n            <div>\r\n                <img src={'https://image.tmdb.org/t/p/w500/'+movie.backdrop_path} alt=\"\" />\r\n            </div>\r\n            <div className={styles.title} >\r\n                <h3>{movie.title}</h3>\r\n            </div>\r\n            </div>\r\n            \r\n        </Card>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { MovieCard } from \"../movie/movieCard/movie-card\";\r\nimport SwiperCore, { Virtual } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n\r\n// Import Swiper styles\r\nimport 'swiper/swiper.scss';\r\n// install Virtual module\r\n// SwiperCore.use([Virtual]);\r\n\r\ninterface MovieProps {\r\n    movieList: iMovieList[]\r\n}\r\nSwiperCore.use([Virtual])\r\n\r\n\r\nexport const MovieListComponent: React.FC<MovieProps> = props => {\r\n    const movieList = props.movieList;\r\n    // eslint-disable-next-line\r\n    const wrapper = {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"row\",\r\n        flexWrap: \"wrap\",\r\n    } as React.CSSProperties;\r\n    return (\r\n        <Swiper spaceBetween={50} slidesPerView={3} virtual>\r\n            {movieList.map((movie, index) => (\r\n                <SwiperSlide key={index}>\r\n                    <MovieCard movie={movie} ></MovieCard>\r\n                </SwiperSlide>\r\n            ))}\r\n        </Swiper>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Main from '../../layouts/main';\r\nimport MovieService from '../../http/service/MovieService';\r\nimport { MovieListComponent } from '../../components/movie/movie-list';\r\nconst service = new MovieService();\r\nexport default () => {\r\n    const [movies, setMovies] = useState([]);\r\n    useEffect(() => {\r\n        service.getPopularMovies().then((res) => {\r\n            setMovies(res.results);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <Main>\r\n            <h1>Movies</h1>\r\n            <MovieListComponent movieList={movies} />\r\n        </Main>\r\n    );\r\n};\r\n","\r\nimport Home from '../pages/home'\r\nimport Movies from '../pages/movies'\r\nimport NotFound from '../pages/error';\r\nexport default [\r\n  {\r\n    path: '/home',\r\n    component: Home,\r\n  },\r\n  {\r\n    path: '/movies',\r\n    component: Movies,\r\n  },\r\n  {\r\n    path: '/404',\r\n    component: NotFound,\r\n  }\r\n];","import React from 'react';\r\nimport Main from '../../layouts/main';\r\n\r\nexport default () => {\r\n    return (\r\n        <Main>\r\n            <div\r\n                style={{\r\n                    textAlign: 'center',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    height: '100vh',\r\n                }}\r\n            >\r\n                <div>\r\n                    <div style={{ maxWidth: 600 + 'px', margin: '0px auto' }}>\r\n                        <h1>React Movies</h1>\r\n                        <h4 style={{ color: '#5c255c' }}>\r\n                            The Movie Database (TMDb) is a community built movie and TV database. Every piece of data\r\n                            has been added by our amazing community dating back to 2008. TMDb's strong international\r\n                            focus and breadth of data is largely unmatched and something we're incredibly proud of. Put\r\n                            simply, we live and breathe community and that's precisely what makes us different.\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <a href={'https://github.com/LuisMartinez28/react-movie'}>\r\n                        <i style={{ color: '#5e6367' }} className={'fab fa-github fa-4x'} />\r\n                    </a>\r\n                    <br />\r\n                    <small>Source Code</small>\r\n                </div>\r\n            </div>\r\n        </Main>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Main from '../../layouts/main';\r\nexport default () => {\r\n    return (\r\n        <Main>\r\n            <div\r\n                style={{\r\n                    textAlign: 'center',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    height: '100vh',\r\n                }}\r\n            >\r\n                <h1>Page Not Found 404</h1>\r\n            </div>\r\n        </Main>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport routerMap from \"./config\";\r\nfunction CustomRoute(props: iRouterViewProps) {\r\n  let path: string = props.location.pathname;\r\n  props.beforeEnter && props.beforeEnter(path);\r\n  // '/'-> '/home\r\n  if (path === '/') return <Redirect to='/home' />\r\n  // if can match\r\n  let matchRoute: any = routerMap.find(item => {\r\n    let url = item.path;\r\n    // /movies/:id -> \\\\/movies\\\\/[^/+]\r\n    url = url.replace(/(:.+)/g, \"[^/]+\").replace(/\\//g, \"\\\\/\");\r\n\r\n    return new RegExp(`${url}(\\\\/|\\\\/)?$`, 'gi').test(path);\r\n  });\r\n\r\n  if (matchRoute) {\r\n    return <Route exact={!matchRoute.hasChild} path={matchRoute.path} component={matchRoute.component} />\r\n  }\r\n  return <Redirect to='/404' />\r\n}\r\n\r\nexport const RouterView: React.FC<iRouterViewProps> = props => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <CustomRoute {...props} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}","import React from 'react';\r\nimport {RouterView} from './router/router-view';\r\n\r\nfunction App() {\r\n    return (\r\n        <React.StrictMode>\r\n            <div className=\"app\">\r\n                <RouterView />\r\n            </div>\r\n        </React.StrictMode>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_body\":\"movie-card_card_body__1j_AA\",\"title\":\"movie-card_title__2opVj\"};"],"sourceRoot":""}